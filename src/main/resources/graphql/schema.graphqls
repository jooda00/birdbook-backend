type Book {
    id: ID!
    title: String!
    author: String!
    isbn: String!
}

type User {
    id: ID!
    username: String!
    role: String!
}

type BookLike {
    id: ID!
    user: User!
    book: Book!
}

type Note {
    id: ID!
    title: String!
    content: String!
}

# input type
input BookReq {
    title: String!
    author: String!
    isbn: String!
    userId: Int!
}

input BookLikeReq {
    userId: Int!
    bookId: Int!
}

input NoteReq {
    bookId: Int!
    title: String!
    content: String!
}

input NoteDeleteReq {
    noteId: Int!
}

# save / delete
type Mutation {
    saveBook(input: BookReq!): Book!
    saveBookLike(input: BookLikeReq!): BookLike!
    saveNote(input: NoteReq!): Note!
    deleteNote(input: NoteDeleteReq!): Int! # 삭제된 노트의 id 값 반환 -> 서브셋 요청 불가
}

# Query가 꼭 포함되어야 함
type Query {
    # 기본적인 책 조회를 위한 쿼리 추가
    getBooks: [Book!]! # 모든 책을 조회하는 쿼리
    getBook(id: ID!): Book # ID로 특정 책을 조회하는 쿼리
}